from src.db.functions import db_get_data_products
from src.db.models import Product


def generation_message_product(product: Product) -> str:
    return f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n\n–¶–µ–Ω–∞: {product.price}—Ä.'


def generation_message_cartitems(lst_items) -> str:
    text = '–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ ‚¨áÔ∏è\n\n'
    for el in lst_items:
        temp_string = f'- {el[0].capitalize()}, –∫–æ–ª-–≤–æ: {el[1]}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {el[2]}—Ä\n'
        text += temp_string
    text += f'\n–ö –æ–ø–ª–∞—Ç–µ: {sum([el[2] for el in lst_items])}—Ä'
    return text


async def generation_order_data(products, order_id) -> str:
    list_products = [el.split(',') for el in products.split('\n')]
    list_products = [[el_1.split(':')[1], el_2.split(':')[1]] for [el_1, el_2] in list_products]
    products_ids = [int(el[0]) for el in list_products]
    quantity_list = [int(el[1]) for el in list_products]

    answer = await db_get_data_products(products_ids)

    text = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} üëá\n\n'
    for el_1, el_2 in zip(answer, quantity_list):
        text += f'{el_1[0]}, –∫–æ–ª-–≤–æ: {el_2}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {el_1[1]}\n'
    return text